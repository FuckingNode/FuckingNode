import { StringUtils } from "@zakahacecosas/string-utils";
import type { TheExporterConstructedParams } from "./constructors/command.ts";
import { GetProjectEnvironment, SpotProject } from "../functions/projects.ts";
import { JoinPaths } from "../functions/filesystem.ts";
import { ColorString, LogStuff, StringifyYaml } from "../functions/io.ts";
import { APP_NAME, VERSION } from "../constants.ts";
import { GetDateNow } from "../functions/date.ts";

export default async function TheExporter(params: TheExporterConstructedParams) {
    try {
        const { project } = params;

        if (!StringUtils.validate(project)) {
            throw new Error(`Project not given!`);
        }

        const workingProject = await SpotProject(project);

        if (!workingProject) {
            throw new Error("No project!");
        }

        const env = await GetProjectEnvironment(workingProject);

        const cpfString = params.json === true ? JSON.stringify(env.main.cpfContent, undefined, 2) : StringifyYaml(env.main.cpfContent);

        const outFileName = params.json === true ? "fknode-cpf.jsonc" : "fknode-cpf.yaml";

        const comment =
            `# Generated by ${APP_NAME.STYLED}@${VERSION}\n# ${APP_NAME.CASED} Common Package File version 1.0.0\n# This has been manually generated at ${GetDateNow()}. Content here isn't synced with your project.`;

        const commentString = params.json === true ? comment.replaceAll("#", "//") : comment;

        await Deno.writeTextFile(
            await JoinPaths(env.root, outFileName),
            `${commentString}\n${cpfString}`,
        );

        if (params.cli === true) await LogStuff(cpfString);
        await LogStuff(`${ColorString(outFileName, "bold")} file written successfully`, "tick", "bright-green");
    } catch (e) {
        throw e;
    }
}
